<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Speccy on boblbobl</title><link>https://boblbobl.com/tags/speccy/</link><description>Recent content in Speccy on boblbobl</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 01 Dec 2020 10:11:10 +0100</lastBuildDate><atom:link href="https://boblbobl.com/tags/speccy/index.xml" rel="self" type="application/rss+xml"/><item><title>Making a ZX Spectrum Game - Part 4 - Graphics</title><link>https://boblbobl.com/2020/12/01/making-a-zx-spectrum-game-part-4-graphics/</link><pubDate>Tue, 01 Dec 2020 10:11:10 +0100</pubDate><guid>https://boblbobl.com/2020/12/01/making-a-zx-spectrum-game-part-4-graphics/</guid><description>&lt;p>I have now come to the point, where I would like to add a bit more graphics to the prototype. Instead of having basic characters act as standins for the graphics, why not do the actual graphics themselves. To start with, I would like to render a lime instead of the &amp;ldquo;@&amp;rdquo; character.&lt;/p>
&lt;p>Before I can begin, I need to better understand the graphics capabilities of the ZX Spectrum and what options there are.&lt;/p></description></item><item><title>Making a ZX Spectrum Game - Part 3 - Cross Compiling in ZX Basic</title><link>https://boblbobl.com/2020/11/24/making-a-zx-spectrum-game-part-3-cross-compiling-in-zx-basic/</link><pubDate>Tue, 24 Nov 2020 10:22:22 +0100</pubDate><guid>https://boblbobl.com/2020/11/24/making-a-zx-spectrum-game-part-3-cross-compiling-in-zx-basic/</guid><description>&lt;p>The time has come to look into cross compiling my code for the ZX Spectrum. As I alluded to in &lt;a href="https://boblbobl.com/2020/11/10/making-a-zx-spectrum-game-part-1-my-development-setup/" >part 1&lt;/a> of the series, I intend to use &lt;a href="https://github.com/boriel/zxbasic" >ZXBASIC&lt;/a> for cross compiling, which also means I can basically take (no pun intended) the prototype already writen in Sinclair BASIC and rewrite it in ZXBASIC.&lt;/p>
&lt;p>The advantage of ZXBASIC, besides compiling to assembler, is that it is also a modern take or dialect on BASIC (especially when compared to Sinclair BASIC), where it tries to keep some of the original Sinclair BASIC features, which definitely eases the transition from one language to the other, but it also offers features of a cross compiled language, such as data types and the possibility to do inline assembly code.&lt;/p></description></item><item><title>Making a ZX Spectrum Game - Part 2 - The Initial Prototype in Sinclair Basic</title><link>https://boblbobl.com/2020/11/17/making-a-zx-spectrum-game-part-2-the-initial-prototype-in-sinclair-basic/</link><pubDate>Tue, 17 Nov 2020 10:45:06 +0100</pubDate><guid>https://boblbobl.com/2020/11/17/making-a-zx-spectrum-game-part-2-the-initial-prototype-in-sinclair-basic/</guid><description>&lt;p>Now it is time to write some actual code. As I described in a &lt;a href="https://boblbobl.com/2020/11/10/making-a-zx-spectrum-game-part-1-my-development-setup/" >previous post&lt;/a>, I want to create an initial prototype directly in Sinclair BASIC, which will allow me to test out the gameplay of the Awakeman game on a ZX Spectrum.&lt;/p>
&lt;p>It has been a while since I coded in BASIC. My first job as a developer was to create small programs in Visual Basic for Applications (VBA), so building this prototype will also act as a refresher to BASIC.&lt;/p></description></item><item><title>Making a ZX Spectrum Game - Part 1 - My Development Setup</title><link>https://boblbobl.com/2020/11/10/making-a-zx-spectrum-game-part-1-my-development-setup/</link><pubDate>Tue, 10 Nov 2020 14:59:23 +0100</pubDate><guid>https://boblbobl.com/2020/11/10/making-a-zx-spectrum-game-part-1-my-development-setup/</guid><description>&lt;p>With side-projects like this one, I tend to leave the project unchanged for weeks. Therefore, I have found it good practice to write down the explicit details about my development setup; it makes it a lot easier to return to a project set on pause for a while.&lt;/p>
&lt;p>As a general rule-of-thumb, my development setup has to be as platform-agnostic as possible. I think this is good practice. It allows a broader audience to follow-along when doing tutorials like this one, and it makes me independent from whether my next primary computer would be a Mac or a Windows PC. As a side note, I used to change jobs every 2-3 years, where my next computer was decided for me by the company “default” and not by my preferences.&lt;/p></description></item><item><title>Making a ZX Spectrum Game - Part 0 - Defining the Project</title><link>https://boblbobl.com/2020/11/04/making-a-zx-spectrum-game-part-0-defining-the-project/</link><pubDate>Wed, 04 Nov 2020 16:24:58 +0100</pubDate><guid>https://boblbobl.com/2020/11/04/making-a-zx-spectrum-game-part-0-defining-the-project/</guid><description>&lt;p>For sentimental reasons, I recently bought a ZX Spectrum from a dear colleague, but what to do with it? I could play games from my childhood, but why not make my own?! The Speccy, after all, was what created a generation of bedroom coders. Because of the 8-bit hardware limitations, this would be an excellent opportunity to flex my programming muscle, something I do not get to do all that often.&lt;/p></description></item></channel></rss>